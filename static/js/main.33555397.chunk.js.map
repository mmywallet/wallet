{"version":3,"sources":["wallet.svg","IconexConnect.js","SDK.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","IconexConnect","getAddress","Promise","resolve","window","addEventListener","eventHandler","event","_event$detail","detail","type","payload","removeEventListener","dispatchEvent","CustomEvent","sendTransaction","params","_event$detail2","result","provider","HttpProvider","PROVIDER_URL","iconService","IconService","CallBuilder","IconBuilder","CallTransactionBuilder","SDK","callBuild","_ref","arguments","length","undefined","from","methodName","to","_ref$params","method","build","sendTxBuild","_ref2","_ref2$params","_ref2$networkId","networkId","NID","_ref2$stepLimit","stepLimit","_ref2$value","value","jsonrpc","nid","timestamp","concat","Date","getTime","toString","version","id","App","state","curAmount","login","myAddress","funcLogin","_callee","e","regenerator_default","a","wrap","_context","prev","next","sent","console","log","call","address","CONTRACT_ADDRESS","execute","_this","setState","Number","stop","funcConfirm","_callee2","_this$state","txObj","tx","_context2","balance","IconConverter","toHex","alert","funcChange","_this$state2","target","_this$state3","this","react_default","createElement","className","src","logo","alt","style","display","flexWrap","Fragment","Input","inputProps","aria-label","margin","color","name","onChange","Button","variant","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2RCkCvBC,EAAA,CACbC,WAnCe,kBAAM,IAAIC,QAAQ,SAACC,GAQlCC,OAAOC,iBAAiB,wBAPH,SAAfC,EAAgBC,GAAU,IAAAC,EACJD,EAAME,OAAxBC,EADsBF,EACtBE,KAAMC,EADgBH,EAChBG,QACD,qBAATD,GACFP,EAAQQ,GAEVP,OAAOQ,oBAAoB,wBAAyBN,KAGtDF,OAAOS,cAAc,IAAIC,YAAY,uBAAwB,CAC3DL,OAAQ,CACNC,KAAM,yBAyBVK,gBAnBsB,SAAAC,GAAM,OAAI,IAAId,QAAQ,SAACC,GAQ7CC,OAAOC,iBAAiB,wBAPH,SAAfC,EAAgBC,GAAU,IAAAU,EACJV,EAAME,OAAxBC,EADsBO,EACtBP,KAAMC,EADgBM,EAChBN,QACD,sBAATD,GACFP,EAAQQ,EAAQO,QAElBd,OAAOQ,oBAAoB,wBAAyBN,KAGtDF,OAAOS,cAAc,IAAIC,YAAY,uBAAwB,CAC3DL,OAAQ,CACNC,KAAM,mBACNC,QAASK,2BCxBTG,EAAW,IAAIC,eAAahB,OAAOiB,cACnCC,EAAc,IAAIC,IAAYJ,GAGlCK,EAEEC,cAFFD,YACAE,EACED,cADFC,uBAiDaC,EAAA,CACbL,cACAM,UAhDgB,WAKP,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAJFG,EAISJ,EAJTI,KACAC,EAGSL,EAHTK,WACAC,EAESN,EAFTM,GAESC,EAAAP,EADTb,cACS,IAAAoB,EADA,GACAA,EAQT,OAPoB,IAAIZ,GAErBS,KAAKA,GACLE,GAAGA,GACHE,OAAOH,GACPlB,OAAOA,GACPsB,SAqCHC,YAjCkB,WAQT,IAAAC,EAAAV,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAPFG,EAOSO,EAPTP,KACAE,EAMSK,EANTL,GACAD,EAKSM,EALTN,WAKSO,EAAAD,EAJTxB,cAIS,IAAAyB,EAJA,GAIAA,EAAAC,EAAAF,EAHTG,iBAGS,IAAAD,EAHGtC,OAAOwC,IAGVF,EAAAG,EAAAL,EAFTM,iBAES,IAAAD,EAFG,UAEHA,EAAAE,EAAAP,EADTQ,aACS,IAAAD,EADD,MACCA,EAcT,MAAO,CACLE,QAAS,MACTZ,OAAQ,sBACRrB,QAhB6B,IAAIU,GAEhCwB,IAAIP,GACJV,KAAKA,GACLE,GAAGA,GACHW,UAAUA,GACVE,MAAMA,GACNG,UANS,KAAAC,QAMgC,KAAxB,IAAIC,MAAQC,WAAkBC,SAAS,MACxDlB,OAAOH,GACPlB,OAAOA,GACPwC,QAAQ,OACRlB,QAMDmB,GAAI,KC3CWC,6MACnBC,MAAQ,CACNC,UAAW,EACXC,OAAO,EACPC,UAAW,MAGbC,gDAAY,SAAAC,EAAOC,GAAP,IAAAH,EAAAF,EAAA,OAAAM,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEcvE,EAAcC,aAF5B,cAEJ6D,EAFIO,EAAAG,KAGVC,QAAQC,IAAIZ,GAHFO,EAAAE,KAAA,EAKc5C,EAAIL,YAAYqD,KACtChD,EAAIC,UAAU,CACZM,WAAY,cACZlB,OAAQ,CACN4D,QAASd,GAEX3B,GAAI/B,OAAOyE,oBAEbC,UAbQ,OAKJlB,EALIS,EAAAG,KAeVC,QAAQC,IAAI,sBAAuBd,GACnCmB,EAAKC,SAAS,CACZlB,YACAD,OAAO,EACPD,UAAWqB,OAAOrB,IAAc,MAnBxB,wBAAAS,EAAAa,SAAAlB,8DAuBZmB,kDAAc,SAAAC,EAAOnB,GAAP,IAAA1B,EAAA8C,EAAAzB,EAAAE,EAAAwB,EAAAC,EAAA,OAAArB,EAAAC,EAAAC,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cACJhC,EAAgBZ,EAAhBY,YADI8C,EAEqBN,EAAKpB,MAA9BC,EAFIyB,EAEJzB,UAAWE,EAFPuB,EAEOvB,UACnBW,QAAQC,IAAI,cAAed,EAAWE,GAChCwB,EAAQ/C,EAAY,CACxBN,KAAM6B,EACN3B,GAAI/B,OAAOyE,iBACX3C,WAAY,cACZlB,OAAQ,CACNyE,QAASC,gBAAcC,MAAMV,OAAOrB,OAT5B4B,EAAAjB,KAAA,EAYKvE,EAAce,gBAAgBuE,GAZnC,OAYNC,EAZMC,EAAAhB,KAaZC,QAAQC,IAAI,KAAMa,SAAWA,GAC1BA,EACDK,MAAM,sBAASX,OAAOrB,GAAW,4DAEjCgC,MAAM,uFAjBI,wBAAAJ,EAAAN,SAAAE,8DAqBdS,WAAa,SAAC5B,GAAM,IAAA6B,EACef,EAAKpB,MAA9BC,EADUkC,EACVlC,UADUkC,EACChC,UAEnBiB,EAAKC,SAAS,CACZpB,UAAWK,EAAE8B,OAAO/C,QAEtByB,QAAQC,IAAI,aAAc,KAAMT,EAAE8B,OAAO/C,MAAOY,EAAW,KAAMmB,EAAKpB,MAAMC,oFAGvE,IAAAoC,EAEiCC,KAAKtC,MAA1BE,GAFZmC,EAECpC,UAFDoC,EAEYnC,OAFZmC,EAEmBlC,UAC1B,OACEoC,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,OACbF,EAAA/B,EAAAgC,cAAA,UAAQC,UAAU,cAChBF,EAAA/B,EAAAgC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCL,EAAA/B,EAAAgC,cAAA,KAAGC,UAAU,UAAb,oCAGAF,EAAA/B,EAAAgC,cAAA,OAAKK,MAAO,CAACC,QAAS,OAAQC,SAAU,SAElC7C,EACEqC,EAAA/B,EAAAgC,cAAAD,EAAA/B,EAAAwC,SAAA,KACET,EAAA/B,EAAAgC,cAACS,EAAA,EAAD,CACEC,WAAY,CACVC,aAAc,eAEhBN,MAAO,CAACO,OAAQ,GAAIC,MAAO,WAC3BC,KAAK,YACLjE,MAAOiD,KAAKtC,MAAMC,UAClBsD,SAAUjB,KAAKJ,aAEjBK,EAAA/B,EAAAgC,cAACgB,EAAA,EAAD,CAAQC,QAAQ,YAAYJ,MAAM,UAAUK,QAASpB,KAAKd,aAA1D,YAKFe,EAAA/B,EAAAgC,cAACgB,EAAA,EAAD,CAAQC,QAAQ,YAAYJ,MAAM,UAAUK,QAASpB,KAAKlC,WAA1D,mCAxFiBuD,aCAbC,QACW,cAA7BnH,OAAOoH,SAASC,UAEe,UAA7BrH,OAAOoH,SAASC,UAEhBrH,OAAOoH,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAA/B,EAAAgC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.33555397.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallet.5f578ddf.svg\";","const getAddress = () => new Promise((resolve) => {\n    const eventHandler = (event) => {\n      const { type, payload } = event.detail;\n      if (type === 'RESPONSE_ADDRESS') {\n        resolve(payload);\n      }\n      window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    };\n    window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    window.dispatchEvent(new CustomEvent('ICONEX_RELAY_REQUEST', {\n      detail: {\n        type: 'REQUEST_ADDRESS',\n      },\n    }));\n  });\n  \n  \n  const sendTransaction = params => new Promise((resolve) => {\n    const eventHandler = (event) => {\n      const { type, payload } = event.detail;\n      if (type === 'RESPONSE_JSON-RPC') {\n        resolve(payload.result);\n      }\n      window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    };\n    window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    window.dispatchEvent(new CustomEvent('ICONEX_RELAY_REQUEST', {\n      detail: {\n        type: 'REQUEST_JSON-RPC',\n        payload: params,\n      },\n    }));\n  });\n  \n  export default {\n    getAddress,\n    sendTransaction,\n  };","import IconService, {\n    HttpProvider,\n    IconBuilder,\n  } from 'icon-sdk-js'\n  \n  const provider = new HttpProvider(window.PROVIDER_URL)\n  const iconService = new IconService(provider)\n  \n  const {\n    CallBuilder,\n    CallTransactionBuilder,\n  } = IconBuilder;\n  \n  const callBuild = ({\n    from,\n    methodName,\n    to,\n    params = {},\n  } = {}) => {\n    const callBuilder = new CallBuilder();\n    const obj = callBuilder\n      .from(from)\n      .to(to)\n      .method(methodName)\n      .params(params)\n      .build();\n    return obj;\n  };\n  \n  const sendTxBuild = ({\n    from,\n    to,\n    methodName,\n    params = {},\n    networkId = window.NID,\n    stepLimit = '0x493e0',\n    value = '0x0',\n  } = {}) => {\n    const callTransactionBuilder = new CallTransactionBuilder();\n    const obj = callTransactionBuilder\n      .nid(networkId)\n      .from(from)\n      .to(to)\n      .stepLimit(stepLimit)\n      .value(value)\n      .timestamp(`0x${((new Date()).getTime() * 1000).toString(16)}`)\n      .method(methodName)\n      .params(params)\n      .version('0x3')\n      .build();\n  \n    return {\n      jsonrpc: '2.0',\n      method: 'icx_sendTransaction',\n      params: obj,\n      id: 1,\n    };\n  };\n  \n  export default {\n    iconService,\n    callBuild,\n    sendTxBuild,\n  }","import React, { Component } from 'react';\nimport logo from './wallet.svg';\nimport './App.css';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport IconexConnect from './IconexConnect';\nimport {\n  IconConverter\n} from 'icon-sdk-js'\nimport SDK from './SDK';\nimport './App.css';\n\nexport default class App extends Component{\n  state = {\n    curAmount: 0,\n    login: false,\n    myAddress: ''\n  }\n\n  funcLogin = async (e) => {\n    \n    const myAddress = await IconexConnect.getAddress()\n    console.log(myAddress)\n    \n    const curAmount = await SDK.iconService.call(\n      SDK.callBuild({\n        methodName: 'get_account',\n        params: {\n          address: myAddress\n        },\n        to: window.CONTRACT_ADDRESS,\n      })\n    ).execute()\n\n    console.log(\"funcLogin curAmount\", curAmount)\n    this.setState({\n      myAddress,\n      login: true,\n      curAmount: Number(curAmount) || 100000\n    })\n  }\n\n  funcConfirm = async (e) => {\n    const { sendTxBuild } = SDK\n    const { curAmount, myAddress } = this.state\n    console.log(\"funcConfirm\", curAmount, myAddress)\n    const txObj = sendTxBuild({\n      from: myAddress,\n      to: window.CONTRACT_ADDRESS,\n      methodName: 'set_account',\n      params: {\n        balance: IconConverter.toHex(Number(curAmount)), \n      },\n    })\n    const tx = await IconexConnect.sendTransaction(txObj)\n    console.log(\"tx\", tx, typeof(tx))\n    if(tx) {\n      alert('잔고가 ' + Number(curAmount)+'으로 등록되었습니다.')\n    }else{\n      alert('잔고 등록에 실패했습니다. ㅠ.ㅠ')\n    }\n  }\n\n  funcChange = (e) => {\n    const { curAmount, myAddress } = this.state\n    \n    this.setState({\n      curAmount: e.target.value\n    })\n    console.log(\"funcChange\", \"BB\", e.target.value, curAmount, \"AA\", this.state.curAmount)\n  }\n\nrender() {\n  //const classes = useStyles();\n  const { curAmount, login, myAddress } = this.state\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p className=\"P-logo\">\n        How much do I have in my wallet?\n        </p>\n        <div style={{display: 'flex', flexWrap: 'wrap'}}>\n            {\n              login ? (\n                <>\n                  <Input\n                    inputProps={{\n                      'aria-label': 'Description',\n                    }}\n                    style={{margin: 20, color: '#BDBDBD'}}\n                    name='curAmount'\n                    value={this.state.curAmount}\n                    onChange={this.funcChange}\n                  /> \n                  <Button variant=\"contained\" color=\"primary\" onClick={this.funcConfirm}>\n                    Confirm\n                  </Button>\n                </>\n              ):(\n                <Button variant=\"contained\" color=\"primary\" onClick={this.funcLogin}>\n                  Connect to My Account\n                </Button>\n              )\n            }\n          </div>\n\n      </header>\n    </div>\n  );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}